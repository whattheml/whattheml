import numpy as np
X = np.array(([2, 9], [1, 5], [3, 6]), dtype=float)
y = np.array(([92], [86], [89]), dtype=float)
X = X/np.amax (X, axis=0)
y = y/100

def sigmoid (x):
    return 1/(1 + np.exp(-x))

def derivatives_sigmoid(x):
    sig = sigmoid(x)
    return sig * (1 - sig)

epoch=5000
lr=0.1

inputlayer_neurons = 2
hiddenlayer_neurons = 3
output_neurons = 1

wh=np.random.uniform(size=(inputlayer_neurons, hiddenlayer_neurons))
bh=np.random.uniform(size=(1,hiddenlayer_neurons))
wout=np.random.uniform(size=(hiddenlayer_neurons, output_neurons))
bout=np.random.uniform(size=(1,output_neurons))

hinpl=np.dot (X, wh)
hinp=hinpl + bh
hlayer_act=sigmoid (hinp)
outinpl=np.dot (hlayer_act,wout)
outinp =outinpl+ bout
output= sigmoid (outinp)

EO= y-output
outgrad =derivatives_sigmoid(output)
d_output= EO*outgrad
EH = d_output.dot(wout.T)

hiddengrad = derivatives_sigmoid(hlayer_act)
d_hiddenlayer = EH * hiddengrad

wout += hlayer_act.T.dot(d_output)*lr
wh += X.T.dot(d_hiddenlayer)*lr

print ("Input: \n" + str(X))
print ("Actual Output: \n" + str(y))
print ("Predicted Output: \n",output)